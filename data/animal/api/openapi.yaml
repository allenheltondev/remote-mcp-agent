openapi: 3.0.3
info:
  title: Farm Animal Tracker API
  description: API for managing animal data on a farm
  version: 1.0.0
tags:
  - name: Animal Registry
    description: Animal tracking and lineage
  - name: Animal Care
    description: Management of animal care, like treatment and weight tracking
  - name: Location
    description: Management of farm locations
  - name: Movement and Events
    description: Track where animals are located and what is happening with them
  - name: Production
    description: Track collections from animals
paths:
  /animals:
    post:
      summary: Register a new animal
      operationId: add-animal
      tags: [Animal Registry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Animal'
      responses:
        '201':
          $ref: "#/components/responses/Created"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      summary: List animals with optional filters
      operationId: list-animals
      tags: [Animal Registry]
      parameters:
        - name: species
          in: query
          description: Filter by species
          required: false
          schema:
            type: string
          example:
            chicken
      responses:
        '200':
          description: A list of animals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Animal"

  /animals/{name}:
    parameters:
      - $ref: "#/components/parameters/AnimalName"
    get:
      summary: Get animal details by name
      operationId: get-animal-by-name
      tags: [Animal Registry]
      responses:
        '200':
          description: Animal was found and details were returned
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Animal"
                  - $ref: "#/components/schemas/SystemFields"

        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    put:
      summary: Update animal status or notes by name
      tags: [Animal Registry]
      operationId: update-animal-status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_active:
                  type: boolean
                notes:
                  type: string
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

  /animals/{name}/lineage:
    parameters:
      - $ref: "#/components/parameters/AnimalName"
    put:
      summary: Adds or updates animal lineage
      operationId: log-lineage
      tags: [Animal Registry]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lineage"
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      summary: Get animal lineage
      operationId: get-lineage-by-animal-name
      tags: [Animal Registry]
      responses:
        '200':
          description: The lineage was found and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lineage"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

  /animals/{name}/weights:
    parameters:
      - $ref: "#/components/parameters/AnimalName"
    post:
      summary: Adds a new weight for animal
      operationId: log-weight
      tags: [Animal Care]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Weight"
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      summary: Gets a list of all recorded weights for an animal
      operationId: list-weights-by-name
      tags: [Animal Care]
      responses:
        '200':
          description: The animal was found and a list of weights was returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  weights:
                    type: array
                    items:
                      $ref: "#/components/schemas/Weight"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

  /animals/{name}/treatments:
    parameters:
      - $ref: "#/components/parameters/AnimalName"
    post:
      summary: Add a treatment for an animal
      operationId: log-treatment
      tags: [Animal Care]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Treatment"
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      summary: List all treatments for an animal
      operationId: list-treatments-by-animal-name
      tags: [Animal Care]
      responses:
        '200':
          description: The animal was found and the list of treatments was returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  treatments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Treatment"
                required:
                  - treatments

  /animals/{name}/movements:
    parameters:
      - $ref: "#/components/parameters/AnimalName"
    post:
      summary: Log when an animal is moved between farm locations
      operationId: log-animal-movement
      tags: [Movement and Events]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movement"
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      parameters:
        - in: query
          name: startDate
          description: Get all movements on or after this date
          schema:
            type: string
            format: date
      summary: View all movements for a specific animal
      operationId: list-animal-movements
      tags: [Movement and Events]
      responses:
        '200':
          description: The animal was found and the movements were returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movement"

  /animals/{name}/events:
    parameters:
      - $ref: "#/components/parameters/AnimalName"
    post:
      summary: Log when an animal is moved between farm locations
      operationId: log-animal-event
      tags: [Movement and Events]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      parameters:
        - in: query
          name: startDate
          description: Get all events on or after this date
          schema:
            type: string
            format: date
      summary: View all events for a specific animal
      operationId: list-animal-events-by-name
      tags: [Movement and Events]
      responses:
        '200':
          description: The animal was found and the events were returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /animals/{name}/collections:
    parameters:
      - $ref: "#/components/parameters/AnimalName"
      - $ref: "#/components/parameters/StartDate"
    get:
      summary: List all collections for a specific animal
      operationId: list-collections-by-animal-name
      tags: [Production]
      responses:
        '200':
          description: The animal was found and the collections were returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

  /weights:
    get:
      summary: List current weight of all active animals
      operationId: list-weights
      tags: [Animal Care]
      responses:
        '200':
          description: The list of current animals weights was returned
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        name:
                          type: string
                      required:
                        - name
                    - $ref: "#/components/schemas/Weight"
        '500':
          $ref: "#/components/responses/ServerError"

  /treatments:
    get:
      summary: Lists treatments for all active animals
      operationId: list-treatments
      tags: [Animal Care]
      responses:
        '200':
          description: The list of animal treatments was returned
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        name:
                          type: string
                      required:
                        - name
                    - $ref: "#/components/schemas/Treatment"
        '500':
          $ref: "#/components/responses/ServerError"

  /events:
    get:
      summary: Lists events for all animals
      operationId: list-animal-events
      tags: [Movement and Events]
      responses:
        '200':
          description: The list of animal events was returned
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        animal_name:
                          type: string
                      required:
                        - animal_name
                    - $ref: "#/components/schemas/Event"
        '500':
          $ref: "#/components/responses/ServerError"

  /collections:
    post:
      summary: Add a new collection from an animal
      operationId: log-collection
      tags: [Production]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Collection"
                - type: object
                  properties:
                    animal_name:
                      type: string
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      parameters:
        - in: query
          name: product_type
          description: Filter results by this specific product type
          schema:
            type: string
        - $ref: "#/components/parameters/StartDate"
      summary: List all collections since the start of the calendar year
      operationId: list-collections
      tags: [Production]
      responses:
        '200':
          description: The list of collections was returned
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Collection"
                    - type: object
                      properties:
                        animal_name:
                          type: string
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /locations:
    post:
      summary: Add a new location for farm animals
      operationId: add-location
      tags: [Location]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        '201':
          $ref: "#/components/responses/Created"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      summary: List all locations
      operationId: list-locations
      tags: [Location]
      responses:
        '200':
          description: A list of locations was returned
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/SystemFields"
                    - $ref: "#/components/schemas/Location"
        '500':
          $ref: "#/components/responses/ServerError"

  /locations/{locationName}:
    parameters:
      - $ref: "#/components/parameters/LocationName"
    get:
      summary: Get information about a location
      operationId: get-location
      tags: [Location]
      responses:
        '200':
          description: The location was found and details were returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    put:
      summary: Update name or notes for a location
      operationId: update-location
      tags: [Location]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                notes:
                  type: string
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Remove a location
      operationId: remove-location
      tags: [Location]
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

components:
  schemas:
    Animal:
      type: object
      properties:
        name:
          type: string
        species:
          type: string
        breed:
          type: string
        sex:
          type: string
          enum: [male, female, unknown]
        date_of_birth:
          type: string
        date_acquired:
          type: string
        is_active:
          type: boolean
        tag_number:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
      required:
        - name
        - species


    SystemFields:
      type: object
      properties:
        id:
          type: string
      required:
        - id

    Lineage:
      type: object
      properties:
        mother_id:
          type: string
        father_id:
          type: string

    Weight:
      type: object
      properties:
        measured_on:
          type: string
          format: date
        measured_by:
          type: string
        weight_kg:
          type: number
      required:
        - measured_on
        - weight_kg

    Treatment:
      type: object
      properties:
        treatment_type:
          type: string
        product_used:
          type: string
        dosage:
          type: string
        administered_on:
          type: string
          format: date
        administered_by:
          type: string
        notes:
          type: string
      required:
        - treatment_type
        - administered_on

    Location:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        notes:
          type: string
      required:
        - name

    Movement:
      type: object
      properties:
        from_location:
          type: string
        to_location:
          type: string
        moved_at:
          type: string
          format: date
      required:
        - to_location
        - moved_at

    Event:
      type: object
      properties:
        event_type:
          type: string
        event_date:
          type: string
          format: date
        description:
          type: string
        recorded_By:
          type: string
      required:
        - event_type
        - event_date

    Collection:
      type: object
      properties:
        product_type:
          type: string
        quantity:
          type: number
        unit:
          type: string
        collected_on:
          type: string
          format: date
        collected_by:
          type: string
        notes:
          type: string
      required:
        - product_type
        - quantity
        - unit
        - collected_on

  responses:
    Created:
      description: The entity was successfully created
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
            required:
              - id
    BadRequest:
      description: The request was malformed or unexpected
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
    NotFound:
      description: The requested entity could not be found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
    ServerError:
      description: Something went wrong while processing the request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
    NoContent:
      description: The operation succeeded and there is no data to return

  parameters:
    AnimalName:
      name: name
      in: path
      description: Name of an animal (case insensitive)
      required: true
      schema:
        type: string
      example:
        daisy

    LocationName:
      name: locationName
      in: path
      description: Name of a location
      required: true
      schema:
        type: string

    StartDate:
      in: query
      name: startDate
      description: Get entities on or after this date
      schema:
        type: string
        format: date
